{"version":3,"file":"CustomCard.js","sources":["../../../../src/components/CustomCard/CustomCard.tsx"],"sourcesContent":["import { h } from 'preact';\nimport UIElement from '../internal/UIElement';\nimport CustomCardInput from './CustomCardInput';\nimport { CoreProvider } from '../../core/Context/CoreProvider';\nimport collectBrowserInfo from '../../utils/browserInfo';\nimport triggerBinLookUp from '../internal/SecuredFields/binLookup/triggerBinLookUp';\nimport { CardBinLookupData, CardFocusData } from '../internal/SecuredFields/lib/types';\nimport { BrandObject } from '../Card/types';\nimport { getCardImageUrl, fieldTypeToSnakeCase } from '../internal/SecuredFields/utils';\nimport { TxVariants } from '../tx-variants';\nimport { CustomCardConfiguration } from './types';\nimport { ANALYTICS_FOCUS_STR, ANALYTICS_UNFOCUS_STR } from '../../core/Analytics/constants';\nimport { SendAnalyticsObject } from '../../core/Analytics/types';\n\nexport class CustomCard extends UIElement<CustomCardConfiguration> {\n    public static type = TxVariants.customCard;\n\n    public static analyticsType = 'custom-scheme';\n\n    protected static defaultProps = {\n        onBinLookup: () => {},\n        brandsConfiguration: {}\n    };\n\n    private brand = TxVariants.card;\n\n    formatProps(props: CustomCardConfiguration) {\n        return {\n            ...props,\n            type: TxVariants.customCard\n        };\n    }\n\n    /**\n     * Formats the component data output\n     */\n    formatData() {\n        const sfBrand = this.state.selectedBrandValue;\n        return {\n            paymentMethod: {\n                type: 'scheme',\n                ...this.state.data,\n                ...(sfBrand && { brand: sfBrand })\n            },\n            browserInfo: this.browserInfo,\n            origin: !!window && window.location.origin\n        };\n    }\n\n    protected submitAnalytics(analyticsObj: SendAnalyticsObject) {\n        super.submitAnalytics(analyticsObj, this.props);\n    }\n\n    updateStyles(stylesObj) {\n        if (this.componentRef?.updateStyles) this.componentRef.updateStyles(stylesObj);\n        return this;\n    }\n\n    setFocusOn(frame) {\n        if (this.componentRef?.setFocusOn) this.componentRef.setFocusOn(frame);\n        return this;\n    }\n\n    processBinLookupResponse(binLookupResponse) {\n        if (this.componentRef?.processBinLookupResponse) this.componentRef.processBinLookupResponse(binLookupResponse);\n        return this;\n    }\n\n    dualBrandingChangeHandler(e: Event | string) {\n        if (this.componentRef?.dualBrandingChangeHandler) this.componentRef.dualBrandingChangeHandler(e);\n        return this;\n    }\n\n    handleUnsupportedCard(errObj) {\n        if (this.componentRef?.handleUnsupportedCard) this.componentRef.handleUnsupportedCard(errObj);\n        return this;\n    }\n\n    onBinLookup(obj: CardBinLookupData) {\n        const nuObj = { ...obj };\n        nuObj.rootNode = this._node;\n\n        if (!nuObj.isReset) {\n            // Add brandImage urls, first checking if the merchant has configured their own one for the brand\n            nuObj.supportedBrandsRaw = obj.supportedBrandsRaw?.map((item: BrandObject) => {\n                item.brandImageUrl = this.props.brandsConfiguration[item.brand]?.icon ?? getCardImageUrl(item.brand, this.resources);\n                return item;\n            });\n        }\n\n        this.props.onBinLookup(nuObj);\n    }\n\n    public onBinValue = triggerBinLookUp(this);\n\n    get isValid() {\n        return !!this.state.isValid;\n    }\n\n    get browserInfo() {\n        return collectBrowserInfo();\n    }\n\n    private onFocus = (obj: CardFocusData) => {\n        this.submitAnalytics({\n            type: obj.focus === true ? ANALYTICS_FOCUS_STR : ANALYTICS_UNFOCUS_STR,\n            target: fieldTypeToSnakeCase(obj.fieldType)\n        });\n\n        // Call merchant defined callback\n        this.props.onFocus?.(obj);\n    };\n\n    protected onEnterKeyPressed = (activeElement: Element, component: UIElement) => {\n        this.props.onEnterKeyPressed?.(activeElement, component);\n    };\n\n    render() {\n        return (\n            <CoreProvider i18n={this.props.i18n} loadingContext={this.props.loadingContext} resources={this.resources}>\n                <CustomCardInput\n                    ref={ref => {\n                        this.componentRef = ref;\n                    }}\n                    {...this.props}\n                    {...this.state}\n                    handleKeyPress={this.handleKeyPress}\n                    rootNode={this._node}\n                    onChange={this.setState}\n                    onBinValue={this.onBinValue}\n                    implementationType={'custom'}\n                    resources={this.resources}\n                    brand={this.brand}\n                    onFocus={this.onFocus}\n                />\n            </CoreProvider>\n        );\n    }\n}\n\nexport default CustomCard;\n"],"names":["CustomCard","UIElement","formatProps","props","type","TxVariants","customCard","formatData","sfBrand","this","state","selectedBrandValue","paymentMethod","data","brand","browserInfo","origin","window","location","submitAnalytics","analyticsObj","super","updateStyles","stylesObj","componentRef","setFocusOn","frame","processBinLookupResponse","binLookupResponse","dualBrandingChangeHandler","e","handleUnsupportedCard","errObj","onBinLookup","obj","nuObj","rootNode","_node","isReset","supportedBrandsRaw","map","item","brandImageUrl","brandsConfiguration","icon","getCardImageUrl","resources","isValid","collectBrowserInfo","render","h","CoreProvider","i18n","loadingContext","CustomCardInput","ref","handleKeyPress","onChange","setState","onBinValue","implementationType","onFocus","args","_define_property","card","triggerBinLookUp","focus","ANALYTICS_FOCUS_STR","ANALYTICS_UNFOCUS_STR","target","fieldTypeToSnakeCase","fieldType","onEnterKeyPressed","activeElement","component","analyticsType","defaultProps"],"mappings":"otBAcO,MAAMA,UAAmBC,EAY5BC,WAAAA,CAAYC,GACR,MAAO,IACAA,EACHC,KAAMC,EAAWC,WAEzB,CAKAC,UAAAA,GACI,MAAMC,EAAUC,KAAKC,MAAMC,mBAC3B,MAAO,CACHC,cAAe,CACXR,KAAM,YACHK,KAAKC,MAAMG,QACVL,GAAW,CAAEM,MAAON,IAE5BO,YAAaN,KAAKM,YAClBC,SAAUC,QAAUA,OAAOC,SAASF,OAE5C,CAEUG,eAAAA,CAAgBC,GACtBC,MAAMF,gBAAgBC,EAAcX,KAAKN,MAC7C,CAEAmB,YAAAA,CAAaC,GAET,OADId,KAAKe,cAAcF,cAAcb,KAAKe,aAAaF,aAAaC,GAC7Dd,IACX,CAEAgB,UAAAA,CAAWC,GAEP,OADIjB,KAAKe,cAAcC,YAAYhB,KAAKe,aAAaC,WAAWC,GACzDjB,IACX,CAEAkB,wBAAAA,CAAyBC,GAErB,OADInB,KAAKe,cAAcG,0BAA0BlB,KAAKe,aAAaG,yBAAyBC,GACrFnB,IACX,CAEAoB,yBAAAA,CAA0BC,GAEtB,OADIrB,KAAKe,cAAcK,2BAA2BpB,KAAKe,aAAaK,0BAA0BC,GACvFrB,IACX,CAEAsB,qBAAAA,CAAsBC,GAElB,OADIvB,KAAKe,cAAcO,uBAAuBtB,KAAKe,aAAaO,sBAAsBC,GAC/EvB,IACX,CAEAwB,WAAAA,CAAYC,GACR,MAAMC,EAAQ,IAAKD,GACnBC,EAAMC,SAAW3B,KAAK4B,MAEjBF,EAAMG,UAEPH,EAAMI,mBAAqBL,EAAIK,oBAAoBC,KAAKC,IACpDA,EAAKC,cAAgBjC,KAAKN,MAAMwC,oBAAoBF,EAAK3B,QAAQ8B,MAAQC,EAAgBJ,EAAK3B,MAAOL,KAAKqC,WACnGL,MAIfhC,KAAKN,MAAM8B,YAAYE,EAC3B,CAIA,WAAIY,GACA,QAAStC,KAAKC,MAAMqC,OACxB,CAEA,eAAIhC,GACA,OAAOiC,GACX,CAgBAC,MAAAA,GACI,OACIC,EAACC,EAAAA,CAAaC,KAAM3C,KAAKN,MAAMiD,KAAMC,eAAgB5C,KAAKN,MAAMkD,eAAgBP,UAAWrC,KAAKqC,WAC5FI,EAACI,EAAAA,CACGC,IAAKA,IACD9C,KAAKe,aAAe+B,CAAAA,KAEpB9C,KAAKN,SACLM,KAAKC,MACT8C,eAAgB/C,KAAK+C,eACrBpB,SAAU3B,KAAK4B,MACfoB,SAAUhD,KAAKiD,SACfC,WAAYlD,KAAKkD,WACjBC,mBAAoB,SACpBd,UAAWrC,KAAKqC,UAChBhC,MAAOL,KAAKK,MACZ+C,QAASpD,KAAKoD,UAI9B,mBA3HGxC,SAAAyC,GAUHC,EAAQjD,KAAAA,QAAQT,EAAW2D,MAqE3BD,EAAAtD,KAAOkD,aAAaM,EAAiBxD,OAUrCsD,EAAQF,KAAAA,WAAW3B,IACfzB,KAAKU,gBAAgB,CACjBf,MAAoB,IAAd8B,EAAIgC,MAAiBC,EAAsBC,EACjDC,OAAQC,EAAqBpC,EAAIqC,aAIrC9D,KAAKN,MAAM0D,UAAU3B,EAAAA,IAGzB6B,EAAAtD,KAAU+D,qBAAoB,CAACC,EAAwBC,KACnDjE,KAAKN,MAAMqE,oBAAoBC,EAAeC,EAAAA,KAnGlDX,EADS/D,EACKI,OAAOC,EAAWC,YAEhCyD,EAHS/D,EAGK2E,gBAAgB,iBAE9BZ,EALS/D,EAKQ4E,eAAe,CAC5B3C,YAAa,OACbU,oBAAqB,CAAA"}